#加入注册中心
eureka.client.serviceUrl.defaultZone = http://localhost:10000/eureka/


hystrix.command.default.execution.isolation.strategy=SEMAPHORE
hystrix.command.default.execution.thread.timeoutInMilliseconds=60000
hystrix.command.default.execution.timeout.enabled=false
feign.hystrix.enabled=true
ribbon.ReadTimeout=60000
ribbon.ConnectTimeout=60000


#反向代理(服务端的负载均衡)
# routes to serviceId 这里边是通过serviceid来绑定地址，当在路径后添加/swagger/**则是访问service对应的服务。
zuul.routes.springSwagger.path = /swagger/**
zuul.routes.springSwagger.serviceId = springSwagger
#保证所有微服务session一致
zuul.routes.springSwagger.sensitiveHeaders = "*"

# 如果有多个相同的serviceId,则会进行轮询的方式进行访问
zuul.routes.springFeign.path = /feign/**
zuul.routes.springFeign.serviceId = springFeignClient
zuul.routes.springFeign.sensitiveHeaders = "*"

zuul.routes.springRedis.path = /redis/**
zuul.routes.springRedis.serviceId = springRedis
zuul.routes.springRedis.sensitiveHeaders = "*"

zuul.routes.AuthenticationLogin.path = /auth/**
zuul.routes.springAuthenticationLoginRedis.serviceId = AuthenticationLogin
zuul.routes.AuthenticationLogin.sensitiveHeaders = "*"

# 局部限流：针对某个服务进行限流
##开启限流
zuul.ratelimit.enabled=true
##60s 内请求超过 3 次，服务端就抛出异常，60s 后可以恢复正常请求
zuul.ratelimit.policies.AuthenticationLogin.limit=3
zuul.ratelimit.policies.AuthenticationLogin.refresh-interval=60
##针对某个 IP 进行限流，不影响其他 IP
zuul.ratelimit.policies.AuthenticationLogin.type=origin


# routes to url  这里是绑定具体的ip地址
#zuul.routes.api-a-url.path=/api-a-url/**
#zuul.routes.api-a-url.url=http://localhost:2222/

# 以下示例中,并没有整合类似Eureka之类的服务治理框架，所以需要将该参数设置为false, 否则 配置 的serviceId获取不到对应实例的清单
#ribbon.eureka.enabled = false

#zuul.routes.api-springRedis.path = /redis/**
#api-springRedis.ribbon.listOfServers= 127.0.0.1:10003





#链路服务跟踪
spring.zipkin.base-url=http://localhost:9999
spring.sleuth.sampler.percentage=1.0




